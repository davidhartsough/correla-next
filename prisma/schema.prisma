generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("PGDB_PRISMA_URL") // uses connection pooling
  directUrl         = env("PGDB_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("PGDB_URL_NON_POOLING") // used for migrations
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  profile   Profile?
  profileId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id      String   @id
  name    String
  email   String?
  tagsStr String
  tagsArr String[]
  links   String[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
